name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ toLower(github.repository) }}
  DOCKER_BUILDKIT: 1
  IMAGE_TAG: sha-${{ github.sha }}

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python (tests example)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install app and test deps
        run: |
          pip install -U pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          PYTHONPATH=. pytest -q || (echo "Unit tests failed" && exit 1)

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: SonarQube Scan (optional)
        continue-on-error: true
        uses: SonarSource/sonarqube-scan-action@v2.2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Trivy vulnerability scan (image)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Snyk container scan (optional)
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          args: --severity-threshold=high --policy-path=.snyk

  deploy-staging:
    needs: build-test-scan
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${KUBE_CONFIG_STAGING}" | base64 -d > $HOME/.kube/config
        env:
          KUBE_CONFIG_STAGING: ${{ secrets.KUBE_CONFIG_STAGING_B64 }}

      - name: Deploy with Kustomize (staging)
        uses: imranismail/setup-kustomize@v2
      
      - name: Apply manifests
        run: |
          pushd k8s/overlays/staging >/dev/null
          kustomize edit set image ghcr.io/your-org/sample-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} || true
          popd >/dev/null
          kustomize build k8s/overlays/staging | kubectl apply -f -
          kubectl rollout status deployment/stg-sample-app -n staging --timeout=120s

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://sample.example.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${KUBE_CONFIG_PROD}" | base64 -d > $HOME/.kube/config
        env:
          KUBE_CONFIG_PROD: ${{ secrets.KUBE_CONFIG_PROD_B64 }}

      - name: Deploy with Kustomize (prod)
        uses: imranismail/setup-kustomize@v2

      - name: Apply manifests (rolling update)
        run: |
          pushd k8s/overlays/production >/dev/null
          kustomize edit set image ghcr.io/your-org/sample-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} || true
          popd >/dev/null
          kustomize build k8s/overlays/production | kubectl apply -f -
          kubectl rollout status deployment/prod-sample-app -n production --timeout=180s

